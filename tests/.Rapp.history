subj_names
L
K
eta_in <- list(#
	eta_vec$"p(nu|Sigma_nu)->nu", eta_vec $"p(Y|nu,zeta,sigsq_eps)->nu",#
	eta_vec $"p(zeta)->zeta", eta_vec $"p(Y|nu,zeta,sigsq_eps)->zeta"#
)
eta_in
time_g
C_g
Psi_g
fpc_rotns <- fpc_orthgn(subj_names, L, K, eta_in, time_g, C_g, Psi_g = Psi_g)
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
fpc_rotns <- fpc_orthgn(subj_names, L, K, eta_in, time_g, C_g, Psi_g = Psi_g)
names(fpc_rotns)
Y_hat <- fpc_rotns$"Y_hat"#
Y_low <- fpc_rotns$"Y_low"#
Y_upp <- fpc_rotns$"Y_upp"#
mu_hat <- fpc_rotns$"mu_hat"#
Psi_hat <- fpc_rotns$"list_Psi_hat"#
Zeta_hat <- fpc_rotns$"Zeta_hat"#
Cov_zeta_hat <- fpc_rotns$"Cov_zeta_hat"#
list_zeta_ellipse <- fpc_rotns$"list_zeta_ellipse"
N_sample
n_sample <- 6                       # number of curves for the plots
N_sample <- sort(sample(1:N, n_sample))   # specific curves for the plots
display_fit(N_sample, time_obs, time_g, Y, Y_hat, Y_low, Y_upp, offset = 0.1)
mu_g
mu_hat
mu_hat_add
p_sample <- 1
par(mfrow = c(1+L, length(p_sample))) #, mar = c(5.1, 4.1, 4.1, 2.1))
display_eigenfunctions(L, time_g, mu_g, Psi_g, mu_hat, list_Psi_hat, format_univ = TRUE)
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
display_eigenfunctions(L, time_g, mu_g, Psi_g, mu_hat, list_Psi_hat, format_univ = TRUE)
display_eigenfunctions(L, time_g, mu_g, Psi_g, mu_hat, Psi_hat, format_univ = TRUE)
traceback()
mu_hat
display_eigenfunctions(L, time_g, mu_g, Psi_g, matrix(mu_hat), Psi_hat, format_univ = TRUE)
traceback()
matrix(mu_hat)
display_eigenfunctions(L, time_g, mu_g, Psi_g, matrix(mu_hat), Psi_hat, format_univ = TRUE)
traceback()
mu_g
display_eigenfunctions(L, time_g, list(mu_g), Psi_g, matrix(mu_hat), Psi_hat, format_univ = TRUE)
Psi_hat
split(Psi_hat, col(Psi_hat))
display_eigenfunctions(L, time_g, list(mu_g), Psi_g, matrix(mu_hat), split(Psi_hat, col(Psi_hat)), format_univ = TRUE)
split(Psi_hat, col(Psi_hat))
display_eigenfunctions(L, time_g, list(mu_g), Psi_g, matrix(mu_hat), lapply(split(Psi_hat, col(Psi_hat)), matrix), format_univ = TRUE)
display_eigenfunctions(L, time_g, list(mu_g), Psi_g, matrix(mu_hat), Psi_hat, format_univ = TRUE)
display_eigenfunctions(L, time_g, list(mu_g), Psi_g, matrix(mu_hat), split(Psi_hat, col(Psi_hat)), format_univ = TRUE)
display_eigenfunctions(L, time_g, list(mu_g), Psi_g, matrix(mu_hat), lapply(split(Psi_hat, col(Psi_hat)), matrix), format_univ = TRUE)
Psi_g
display_eigenfunctions(L, time_g, list(mu_g), Psi_g, matrix(mu_hat), lapply(split(Psi_hat, col(Psi_hat)), matrix), format_univ = TRUE)
display_eigenfunctions(L, time_g, list(mu_g), list(Psi_g), matrix(mu_hat), lapply(split(Psi_hat, col(Psi_hat)), matrix), format_univ = TRUE)
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
display_fit(N_sample, time_obs, time_g, Y, Y_hat, Y_low, Y_upp, offset = 0.1)
display_eigenfunctions(L, time_g, mu_g, Psi_g, mu_hat, list_Psi_hat, format_univ = TRUE)
display_eigenfunctions(L, time_g, mu_g, Psi_g, mu_hat, Psi_hat, format_univ = TRUE)
N_sample
p
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
zeta_ellipse
list_zeta_ellipse
Zeta_hat
Zeta
N_sample
length(list_zeta_ellipse)
plot_scores(N_sample, Zeta, Zeta_hat, list_zeta_ellipse)
library(lattice)
plot_scores(N_sample, Zeta, Zeta_hat, list_zeta_ellipse)
source("fpca_vmp.R")
Psi_g
n_vmp
tol
time_g
foo <- run_vmp_fpca(time_obs, Y, K, L, list_hyper = NULL, n_g = 1000, time_g = NULL, tol = tol, maxit = n_vmp, plot_elbo = FALSE, Psi_g = Psi_g, verbose = TRUE, seed = NULL)
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
foo <- run_vmp_fpca(time_obs, Y, K, L, list_hyper = NULL, n_g = 1000, time_g = NULL, tol = tol, maxit = n_vmp, plot_elbo = FALSE, Psi_g = Psi_g, format_univ = FALSE, verbose = TRUE, seed = NULL)
traceback()
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
foo <- run_vmp_fpca(time_obs, Y, K, L, list_hyper = NULL, n_g = 1000, time_g = NULL, tol = tol, maxit = n_vmp, plot_elbo = FALSE, Psi_g = Psi_g, verbose = TRUE, seed = NULL)
traceback()
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
foo <- run_vmp_fpca(time_obs, Y, K, L, list_hyper = NULL, n_g = 1000, time_g = NULL, tol = tol, maxit = n_vmp, plot_elbo = FALSE, Psi_g = Psi_g, verbose = TRUE, seed = NULL)
foo <- run_vmp_fpca(time_obs, Y, K, L, list_hyper = NULL, n_g = 1000, time_g = NULL, tol = tol, maxit = n_vmp, plot_elbo = TRUE, Psi_g = Psi_g, verbose = TRUE, seed = NULL)
foo <- run_vmp_fpca(time_obs, Y, K, L, list_hyper = NULL, n_g = 1000, time_g = NULL, tol = tol, maxit = n_vmp, plot_elbo = FALSE, Psi_g = Psi_g, verbose = TRUE, seed = NULL)
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
foo <- run_vmp_fpca(time_obs, Y, K, L, list_hyper = NULL, n_g = 1000, time_g = NULL, tol = tol, maxit = n_vmp, plot_elbo = TRUE, Psi_g = Psi_g, verbose = TRUE, seed = NULL)
Y_hat <- fpca_res$"Y_hat"#
Y_low <- fpca_res$"Y_low"#
Y_upp <- fpca_res$"Y_upp"#
mu_hat <- fpca_res$"mu_hat"#
Psi_hat <- fpca_res$"list_Psi_hat"#
Zeta_hat <- fpca_res$"Zeta_hat"#
Cov_zeta_hat <- fpca_res$"Cov_zeta_hat"#
list_zeta_ellipse <- fpca_res$"list_zeta_ellipse"
fpca_res <- run_vmp_fpca(time_obs, Y, K, L, list_hyper = NULL, n_g = 1000, time_g = NULL, tol = tol, maxit = n_vmp, plot_elbo = TRUE, Psi_g = Psi_g, verbose = TRUE, seed = NULL)
Y_hat <- fpca_res$"Y_hat"#
Y_low <- fpca_res$"Y_low"#
Y_upp <- fpca_res$"Y_upp"#
mu_hat <- fpca_res$"mu_hat"#
Psi_hat <- fpca_res$"list_Psi_hat"#
Zeta_hat <- fpca_res$"Zeta_hat"#
Cov_zeta_hat <- fpca_res$"Cov_zeta_hat"#
list_zeta_ellipse <- fpca_res$"list_zeta_ellipse"
display_fit(N_sample, time_obs, time_g, Y, Y_hat, Y_low, Y_upp, offset = 0.1)
display_eigenfunctions(L, time_g, mu_g, Psi_g, mu_hat, Psi_hat, format_univ = TRUE)
plot_scores(N_sample, Zeta, Zeta_hat, list_zeta_ellipse)
source("fpca_vmp.R")
traceback()
names(fpca_res)
source("fpca_vmp.R")
######### R script: mfpca_vmp.R ###########
#
# For performing Bayesian MFPCA via VMP.#
#
# Created: 21 MAR 2023#
# Last changed: 21 MAR 2023#
#
# Load libraries:#
#
library(splines)#
library(pracma)#
library(matrixcalc)#
library(lattice)#
#
# Required functions:#
#
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
# Establish simulation variables:#
#
n_obs <- list(10:20, 50:70, 30:40, 100:120)#
n_int_knots <- c(5, 15, 9, 25)                # number of interior knots#
#
p <- 3                                        # number of responses#
N <- 100                                      # number of curves#
n <- Reduce(                                  # number of time observations#
	cbind, lapply(#
		n_obs[1:p], sample,#
		size = N, replace = TRUE#
	)#
)#
n_sample <- 4                                 # number of curves for the plots#
N_sample <- sort(sample(1:N, n_sample))       # specific curves for the plots#
K <- n_int_knots[1:p] + 2                # number of spline basis functions#
L <- 4                              # number of FPCA basis functions#
#
n_vmp <- 200                       # number of vmp iterations#
n_g <- 1000                         # length of the plotting grid#
#
criterion  <- 1e-5                        # convergence criterion#
#
sigma_zeta_vec <- 2/(1:L)           # sd for first and second scores#
sigma_eps <- rep(1, p)      # sd of the residuals#
#
tol <- 1e-5                       # convergence threshold
# Set the mean function and the FPCA basis functions:#
#
mu <- function(time_obs, j) {#
	ans <- ((-1)^j)*3*sin(pi*j*time_obs) - 3/2#
	return(ans)#
}#
#
psi_1 <- function(time_obs, j) {#
	ans <- sqrt(2/p)*sin(2*pi*j*time_obs)#
	return(ans)#
}#
#
psi_2 <- function(time_obs, j) {#
	ans <- sqrt(2/p)*cos(2*pi*j*time_obs)#
	return(ans)#
}#
#
Psi_func <- function(time_obs, j) {#
	ans <- cbind(psi_1(time_obs, j), psi_2(time_obs, j))#
	return(ans)#
}
time_obs
mfpca_data <- generate_fpca_data(N, p, n, K, L, n_g, vec_sd_eps, mu_func, Psi_func)
mfpca_data <- generate_fpca_data(N, p, n, K, L, n_g, vec_sd_eps, mu, Psi_func)
Psi_func <- function(time_obs, j, p) {#
#
  ans <- cbind(psi_1(time_obs, j), psi_2(time_obs, j))#
  return(ans)#
}
mfpca_data <- generate_fpca_data(N, p, n, K, L, n_g, vec_sd_eps, mu, Psi_func)
mfpca_data <- generate_fpca_data(N, p, n, K, L, n_g, sigma_eps, mu, Psi_func)
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
mfpca_data <- generate_fpca_data(N, p, n, K, L, n_g, sigma_eps, mu, Psi_func)
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
mfpca_data <- generate_fpca_data(N, p, n, K, L, n_g, sigma_eps, mu, Psi_func)
traceback()
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
mfpca_data <- generate_fpca_data(N, p, n, K, L, n_g, sigma_eps, mu, Psi_func)
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
mfpca_data <- generate_fpca_data(N, p, n, K, L, n_g, sigma_eps, mu, Psi_func)
L
######### R script: mfpca_vmp.R ###########
#
# For performing Bayesian MFPCA via VMP.#
#
# Created: 21 MAR 2023#
# Last changed: 21 MAR 2023#
#
# Load libraries:#
#
library(splines)#
library(pracma)#
library(matrixcalc)#
library(lattice)#
#
# Required functions:#
#
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")#
#
# Establish simulation variables:#
#
n_obs <- list(10:20, 50:70, 30:40, 100:120)#
n_int_knots <- c(5, 15, 9, 25)                # number of interior knots#
#
p <- 3                                        # number of responses#
N <- 100                                      # number of curves#
n <- Reduce(                                  # number of time observations#
	cbind, lapply(#
		n_obs[1:p], sample,#
		size = N, replace = TRUE#
	)#
)#
n_sample <- 4                                 # number of curves for the plots#
N_sample <- sort(sample(1:N, n_sample))       # specific curves for the plots#
K <- n_int_knots[1:p] + 2                # number of spline basis functions#
L <- 2                              # number of FPCA basis functions#
#
n_vmp <- 200                       # number of vmp iterations#
n_g <- 1000                         # length of the plotting grid#
#
criterion  <- 1e-5                        # convergence criterion#
#
sigma_zeta_vec <- 2/(1:L)           # sd for first and second scores#
sigma_eps <- rep(1, p)      # sd of the residuals#
#
tol <- 1e-5                       # convergence threshold#
#
# Set the mean function and the FPCA basis functions:#
#
mu <- function(time_obs, j) {#
	ans <- ((-1)^j)*3*sin(pi*j*time_obs) - 3/2#
	return(ans)#
}#
#
psi_1 <- function(time_obs, j) {#
	ans <- sqrt(2/p)*sin(2*pi*j*time_obs)#
	return(ans)#
}#
#
psi_2 <- function(time_obs, j) {#
	ans <- sqrt(2/p)*cos(2*pi*j*time_obs)#
	return(ans)#
}#
#
Psi_func <- function(time_obs, j, p) {#
#
  ans <- cbind(psi_1(time_obs, j), psi_2(time_obs, j))#
  return(ans)#
}
L
mfpca_data <- generate_fpca_data(N, p, n, K, L, n_g, sigma_eps, mu, Psi_func)
names(mfpca_data)
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
mfpca_data <- generate_fpca_data(N, p, n, K, L, n_g, sigma_eps, mu, Psi_func)
names(mfpca_data)
mfpca_data
time_g
int_knots
C
C_g
Zeta
mu_g
Psi_g
Y
names(mfpca_data)
time_obs <- mfpca_data$"time_obs"#
Zeta <- mfpca_data$"Zeta"#
mu_g <- mfpca_data$"mu_g"#
Psi_g <- mfpca_data$"Psi_g"#
Y <- mfpca_data$"Y"
time_obs
Zeta
mu_g
Psi_g
Y
list_hyper <- set_hyper()
names(list_hyper)
sigma_zeta <- list_hyper$"sigma_zeta"
sigma_zeta
mu_beta <- list_hyper$"mu_beta"
mu_beta
Sigma_beta <- list_hyper$"Sigma_beta"
Sigma_beta
A <- list_hyper$"A"
subj_names <- paste0("subj_", 1:N)
names(Y) <- names(time_obs) <- subj_names
ifelse(is.list(time_obs[[1]]), FALSE, TRUE)
format_univ <- ifelse(is.list(time_obs[[1]]), FALSE, TRUE) # If TRUE, then p = 1, and vmp_gauss_fpca is used.
format_univ
check_structure(K, "vector", "numeric", 1)
!format_univ
p <- length(time_obs[[1]])
p
check_structure(K, "vector", "numeric", c(1,p))
length(K)==1
!is.null(Psi_g)
stopifnot(is.list(Psi_g))
format_univ
time_obs
K
n_g
time_g
grid_obj <- get_grid_objects(time_obs, K, n_g = n_g, time_g = NULL, format_univ = FALSE)
traceback()
unique(Reduce(c, time_obs))
unlist(time_obs)
unname(sort(unlist(time_obs)))
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
mfpca_data <- generate_fpca_data(N, p, n, K, L, n_g, sigma_eps, mu, Psi_func)
names(mfpca_data)
######### R script: mfpca_vmp.R ###########
#
# For performing Bayesian MFPCA via VMP.#
#
# Created: 21 MAR 2023#
# Last changed: 21 MAR 2023#
#
# Load libraries:#
#
library(splines)#
library(pracma)#
library(matrixcalc)#
library(lattice)#
#
# Required functions:#
#
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")#
#
# Establish simulation variables:#
#
n_obs <- list(10:20, 50:70, 30:40, 100:120)#
n_int_knots <- c(5, 15, 9, 25)                # number of interior knots#
#
p <- 3                                        # number of responses#
N <- 100                                      # number of curves#
n <- Reduce(                                  # number of time observations#
	cbind, lapply(#
		n_obs[1:p], sample,#
		size = N, replace = TRUE#
	)#
)#
n_sample <- 4                                 # number of curves for the plots#
N_sample <- sort(sample(1:N, n_sample))       # specific curves for the plots#
K <- n_int_knots[1:p] + 2                # number of spline basis functions#
L <- 2                              # number of FPCA basis functions#
#
n_vmp <- 200                       # number of vmp iterations#
n_g <- 1000                         # length of the plotting grid#
#
criterion  <- 1e-5                        # convergence criterion#
#
sigma_zeta_vec <- 2/(1:L)           # sd for first and second scores#
sigma_eps <- rep(1, p)      # sd of the residuals#
#
tol <- 1e-5                       # convergence threshold#
#
# Set the mean function and the FPCA basis functions:#
#
mu <- function(time_obs, j) {#
	ans <- ((-1)^j)*3*sin(pi*j*time_obs) - 3/2#
	return(ans)#
}#
#
psi_1 <- function(time_obs, j) {#
	ans <- sqrt(2/p)*sin(2*pi*j*time_obs)#
	return(ans)#
}#
#
psi_2 <- function(time_obs, j) {#
	ans <- sqrt(2/p)*cos(2*pi*j*time_obs)#
	return(ans)#
}#
#
Psi_func <- function(time_obs, j, p) {#
#
  ans <- cbind(psi_1(time_obs, j), psi_2(time_obs, j))#
  return(ans)#
}#
#
#####################################################
##
#  SIMULATE  THE  DATA#
##
#####################################################
#
# Set up the data:#
#
mfpca_data <- generate_fpca_data(N, p, n, K, L, n_g, sigma_eps, mu, Psi_func)#
#
time_obs <- mfpca_data$"time_obs"#
Zeta <- mfpca_data$"Zeta"#
mu_g <- mfpca_data$"mu_g"#
Psi_g <- mfpca_data$"Psi_g"#
Y <- mfpca_data$"Y"
list_hyper <- set_hyper()#
#
sigma_zeta <- list_hyper$"sigma_zeta"#
mu_beta <- list_hyper$"mu_beta"#
Sigma_beta <- list_hyper$"Sigma_beta"#
A <- list_hyper$"A"#
#
subj_names <- paste0("subj_", 1:N)#
names(Y) <- names(time_obs) <- subj_names
grid_obj <- get_grid_objects(time_obs, K, n_g = n_g, time_g = NULL, format_univ = FALSE)
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
grid_obj <- get_grid_objects(time_obs, K, n_g = n_g, time_g = NULL, format_univ = FALSE)
names(grid_obj)
C <- grid_obj$C
n_g <- grid_obj$n_g
time_g <- grid_obj$time_g
C_g <- grid_obj$C_g
p <- length(Y[[1]])#
#
    tmp_names <- lapply(Y, function(Y_i) names(Y_i))#
    tmp_names_time <-  lapply(time_obs, function(time_obs_i) names(time_obs_i))#
    if (is.null(unlist(unique(tmp_names)))) {#
      stopifnot(is.null(unlist(unique(tmp_names_time))))#
      var_names <- paste0("variable_", 1:p)#
      Y <- lapply(Y, function(Y_i) { names(Y_i) <- var_names; Y_i})#
    } else if (!all_same(tmp_names)) {#
      stop("Variable names in Y must be the same for all individuals.")#
    } else {#
      var_names <- names(Y[[1]])#
    }
tmp_names_time
var_names
if (!is.null(unlist(unique(tmp_names_time))) && (!all_same(tmp_names_time) | !isTRUE(all.equal(tmp_names_time[[1]], var_names))))
!is.null(unlist(unique(tmp_names_time))) && (!all_same(tmp_names_time) | !isTRUE(all.equal(tmp_names_time[[1]], var_names)))
time_obs <- lapply(time_obs, function(time_obs_i) { names(time_obs_i) <- var_names; time_obs_i})
time_obs
######### R script: mfpca_vmp.R ###########
#
# For performing Bayesian MFPCA via VMP.#
#
# Created: 21 MAR 2023#
# Last changed: 21 MAR 2023#
#
# Load libraries:#
#
library(splines)#
library(pracma)#
library(matrixcalc)#
library(lattice)#
#
# Required functions:#
#
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")#
#
# Establish simulation variables:#
#
n_obs <- list(10:20, 50:70, 30:40, 100:120)#
n_int_knots <- c(5, 15, 9, 25)                # number of interior knots#
#
p <- 3                                        # number of responses#
N <- 100                                      # number of curves#
n <- Reduce(                                  # number of time observations#
	cbind, lapply(#
		n_obs[1:p], sample,#
		size = N, replace = TRUE#
	)#
)#
n_sample <- 4                                 # number of curves for the plots#
N_sample <- sort(sample(1:N, n_sample))       # specific curves for the plots#
K <- n_int_knots[1:p] + 2                # number of spline basis functions#
L <- 2                              # number of FPCA basis functions#
#
n_vmp <- 200                       # number of vmp iterations#
n_g <- 1000                         # length of the plotting grid#
#
criterion  <- 1e-5                        # convergence criterion#
#
sigma_zeta_vec <- 2/(1:L)           # sd for first and second scores#
sigma_eps <- rep(1, p)      # sd of the residuals#
#
tol <- 1e-5                       # convergence threshold#
#
# Set the mean function and the FPCA basis functions:#
#
mu <- function(time_obs, j) {#
	ans <- ((-1)^j)*3*sin(pi*j*time_obs) - 3/2#
	return(ans)#
}#
#
psi_1 <- function(time_obs, j) {#
	ans <- sqrt(2/p)*sin(2*pi*j*time_obs)#
	return(ans)#
}#
#
psi_2 <- function(time_obs, j) {#
	ans <- sqrt(2/p)*cos(2*pi*j*time_obs)#
	return(ans)#
}#
#
Psi_func <- function(time_obs, j, p) {#
#
  ans <- cbind(psi_1(time_obs, j), psi_2(time_obs, j))#
  return(ans)#
}
#####################################################
##
#  SIMULATE  THE  DATA#
##
#####################################################
#
# Set up the data:#
#
mfpca_data <- generate_fpca_data(N, p, n, K, L, n_g, sigma_eps, mu, Psi_func)#
#
time_obs <- mfpca_data$"time_obs"#
Zeta <- mfpca_data$"Zeta"#
mu_g <- mfpca_data$"mu_g"#
Psi_g <- mfpca_data$"Psi_g"#
Y <- mfpca_data$"Y"
#####################################################
##
#  VMP  SIMULATIONS#
##
#####################################################
#
list_hyper <- set_hyper()#
#
sigma_zeta <- list_hyper$"sigma_zeta"#
mu_beta <- list_hyper$"mu_beta"#
Sigma_beta <- list_hyper$"Sigma_beta"#
A <- list_hyper$"A"#
#
subj_names <- paste0("subj_", 1:N)#
names(Y) <- names(time_obs) <- subj_names#
#
grid_obj <- get_grid_objects(time_obs, K, n_g = n_g, time_g = NULL, format_univ = FALSE)#
#
C <- grid_obj$C#
n_g <- grid_obj$n_g#
time_g <- grid_obj$time_g#
C_g <- grid_obj$C_g#
#
p <- length(Y[[1]])
tmp_names <- lapply(Y, function(Y_i) names(Y_i))#
tmp_names_time <-  lapply(time_obs, function(time_obs_i) names(time_obs_i))#
if (is.null(unlist(unique(tmp_names)))) {#
  stopifnot(is.null(unlist(unique(tmp_names_time))))#
  var_names <- paste0("variable_", 1:p)#
  Y <- lapply(Y, function(Y_i) { names(Y_i) <- var_names; Y_i})#
} else if (!all_same(tmp_names)) {#
  stop("Variable names in Y must be the same for all individuals.")#
} else {#
  var_names <- names(Y[[1]])#
}#
#
time_obs <- lapply(time_obs, function(time_obs_i) { names(time_obs_i) <- var_names; time_obs_i})
time_obs
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
eta_vec <- vmp_gauss_mfpca(n_vmp = maxit, N, p, L, K, C, Y, sigma_zeta, mu_beta,#
                               Sigma_beta, A, tol,#
                               plot_elbo = TRUE, verbose = TRUE)
######### R script: mfpca_vmp.R ###########
#
# For performing Bayesian MFPCA via VMP.#
#
# Created: 21 MAR 2023#
# Last changed: 21 MAR 2023#
#
# Load libraries:#
#
library(splines)#
library(pracma)#
library(matrixcalc)#
library(lattice)#
#
# Required functions:#
#
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")#
#
# Establish simulation variables:#
#
n_obs <- list(10:20, 50:70, 30:40, 100:120)#
n_int_knots <- c(5, 15, 9, 25)                # number of interior knots#
#
p <- 3                                        # number of responses#
N <- 100                                      # number of curves#
n <- Reduce(                                  # number of time observations#
	cbind, lapply(#
		n_obs[1:p], sample,#
		size = N, replace = TRUE#
	)#
)#
n_sample <- 4                                 # number of curves for the plots#
N_sample <- sort(sample(1:N, n_sample))       # specific curves for the plots#
K <- n_int_knots[1:p] + 2                # number of spline basis functions#
L <- 2                              # number of FPCA basis functions#
#
n_vmp <- 200                       # number of vmp iterations#
n_g <- 1000                         # length of the plotting grid#
#
criterion  <- 1e-5                        # convergence criterion#
#
sigma_zeta_vec <- 2/(1:L)           # sd for first and second scores#
sigma_eps <- rep(1, p)      # sd of the residuals#
#
tol <- 1e-5                       # convergence threshold#
#
# Set the mean function and the FPCA basis functions:#
#
mu <- function(time_obs, j) {#
	ans <- ((-1)^j)*3*sin(pi*j*time_obs) - 3/2#
	return(ans)#
}#
#
psi_1 <- function(time_obs, j) {#
	ans <- sqrt(2/p)*sin(2*pi*j*time_obs)#
	return(ans)#
}#
#
psi_2 <- function(time_obs, j) {#
	ans <- sqrt(2/p)*cos(2*pi*j*time_obs)#
	return(ans)#
}#
#
Psi_func <- function(time_obs, j, p) {#
#
  ans <- cbind(psi_1(time_obs, j), psi_2(time_obs, j))#
  return(ans)#
}#
#
#####################################################
##
#  SIMULATE  THE  DATA#
##
#####################################################
#
# Set up the data:#
#
mfpca_data <- generate_fpca_data(N, p, n, K, L, n_g, sigma_eps, mu, Psi_func)#
#
time_obs <- mfpca_data$"time_obs"#
Zeta <- mfpca_data$"Zeta"#
mu_g <- mfpca_data$"mu_g"#
Psi_g <- mfpca_data$"Psi_g"#
Y <- mfpca_data$"Y"#
#
#####################################################
##
#  VMP  SIMULATIONS#
##
#####################################################
#
list_hyper <- set_hyper()#
#
sigma_zeta <- list_hyper$"sigma_zeta"#
mu_beta <- list_hyper$"mu_beta"#
Sigma_beta <- list_hyper$"Sigma_beta"#
A <- list_hyper$"A"#
#
subj_names <- paste0("subj_", 1:N)#
names(Y) <- names(time_obs) <- subj_names#
#
grid_obj <- get_grid_objects(time_obs, K, n_g = n_g, time_g = NULL, format_univ = FALSE)#
#
C <- grid_obj$C#
n_g <- grid_obj$n_g#
time_g <- grid_obj$time_g#
C_g <- grid_obj$C_g#
#
p <- length(Y[[1]])#
#
tmp_names <- lapply(Y, function(Y_i) names(Y_i))#
tmp_names_time <-  lapply(time_obs, function(time_obs_i) names(time_obs_i))#
if (is.null(unlist(unique(tmp_names)))) {#
  stopifnot(is.null(unlist(unique(tmp_names_time))))#
  var_names <- paste0("variable_", 1:p)#
  Y <- lapply(Y, function(Y_i) { names(Y_i) <- var_names; Y_i})#
} else if (!all_same(tmp_names)) {#
  stop("Variable names in Y must be the same for all individuals.")#
} else {#
  var_names <- names(Y[[1]])#
}#
#
time_obs <- lapply(time_obs, function(time_obs_i) { names(time_obs_i) <- var_names; time_obs_i})
eta_vec <- vmp_gauss_mfpca(n_vmp = maxit, N, p, L, K, C, Y, sigma_zeta, mu_beta,#
                               Sigma_beta, A, tol,#
                               plot_elbo = TRUE, verbose = TRUE)
library(magic)
eta_vec <- vmp_gauss_mfpca(n_vmp = maxit, N, p, L, K, C, Y, sigma_zeta, mu_beta,#
                               Sigma_beta, A, tol,#
                               plot_elbo = TRUE, verbose = TRUE)
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
eta_vec <- vmp_gauss_mfpca(n_vmp = maxit, N, p, L, K, C, Y, sigma_zeta, mu_beta,#
                               Sigma_beta, A, tol,#
                               plot_elbo = TRUE, verbose = TRUE)
maxit
n_vmp
eta_vec <- vmp_gauss_mfpca(n_vmp, N, p, L, K, C, Y, mu_beta,#
                               Sigma_beta, A, tol,#
                               plot_elbo = TRUE, verbose = TRUE)
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
eta_vec <- vmp_gauss_mfpca(n_vmp, N, p, L, K, C, Y, mu_beta,#
                               Sigma_beta, A, tol,#
                               plot_elbo = TRUE, verbose = TRUE)
eta_in <- list(#
  eta_vec$"p(nu|Sigma_nu)->nu", eta_vec$"p(Y|nu,zeta,sigsq_eps)->nu",#
  eta_vec$"p(zeta)->zeta", eta_vec$"p(Y|nu,zeta,sigsq_eps)->zeta"#
)
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
mfpca_res <- mfpc_orthgn(eta_in, L, K, time_g, N_sample, C_g, Psi_g)
names(mfpca_res)
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")
mfpca_res <- mfpc_orthgn(eta_in, L, K, time_g, N_sample, C_g, Psi_g)
names(mfpca_res)
time_g <- mfpca_res$"time_g"#
Y_hat <- mfpca_res$"Y_hat"#
Y_low <- mfpca_res$"Y_low"#
Y_upp <- mfpca_res$"Y_upp"#
mu_hat <- mfpca_res$"mu_hat"#
Psi_hat <- mfpca_res$"list_Psi_hat"#
Zeta_hat <- mfpca_res$"Zeta_hat"#
Cov_zeta_hat <- mfpca_res$"Cov_zeta_hat"#
list_zeta_ellipse <- mfpca_res$"list_zeta_ellipse"
time_g
Y_hat
Y_low
Y_upp
mu_hat
Psi_hat
Zeta_hat
Cov_zeta_hat
list_zeta_ellipse
N_sample
time_obs
time_g
Y
display_fit(N_sample, time_obs, time_g, Y, Y_hat, Y_low, Y_upp, offset = 0.1)
traceback()
display_fit_list(1:p, N_sample, time_obs, time_g, Y, Y_hat, Y_low, Y_upp)
L
time_g
mu_g
Psi_g
mu_hat
list_Psi_hat
list_Psi_hat <- mfpca_res$"list_Psi_hat"
list_Psi_hat
display_eigenfunctions <- function(L, time_g, mu_g, Psi_g, p_sample = 1:p)
display_eigenfunctions(L, time_g, mu_g, Psi_g, p_sample = 1:p)
display_eigenfunctions(L, time_g, mu_g, Psi_g, mu_hat, list_Psi_hat, p_sample = 1:p)
plot_scores(N_sample, Zeta, Zeta_hat, list_zeta_ellipse)
source("mfpca_vmp.R")
1/(1:p)
source("mfpca_vmp.R")
######### R script: mfpca_vmp.R ###########
#
# For performing Bayesian MFPCA via VMP.#
#
# Created: 21 MAR 2023#
# Last changed: 21 MAR 2023#
#
# Load libraries:#
#
library(splines)#
library(pracma)#
library(matrixcalc)#
library(lattice)#
library(magic)#
#
# Required functions:#
#
setwd("../R")#
#
source("fourier_basis.r")#
source("fpca_algs.R")#
source("OSullivan_splines.R")#
source("plot_functions.R")#
source("set_hyper.R")#
source("simulation_functions.R")#
source("utils.R")#
source("vmp_functions.R")#
source("wait.r")#
#
setwd("../tests")#
#
# Establish simulation variables:#
#
n_obs <- list(10:20, 50:70, 30:40, 100:120)#
n_int_knots <- c(5, 15, 9, 25)                # number of interior knots#
#
p <- 3                                        # number of responses#
N <- 100                                      # number of curves#
n <- Reduce(                                  # number of time observations#
	cbind, lapply(#
		n_obs[1:p], sample,#
		size = N, replace = TRUE#
	)#
)#
n_sample <- 4                                 # number of curves for the plots#
N_sample <- sort(sample(1:N, n_sample))       # specific curves for the plots#
K <- n_int_knots[1:p] + 2                # number of spline basis functions#
L <- 2                              # number of FPCA basis functions#
#
n_vmp <- 200                       # number of vmp iterations#
n_g <- 1000                         # length of the plotting grid#
#
criterion  <- 1e-5                        # convergence criterion#
#
sigma_zeta_vec <- 2/(1:L)           # sd for first and second scores#
sigma_eps <- 1/(1:p)      # sd of the residuals#
#
tol <- 1e-5                       # convergence threshold#
#
# Set the mean function and the FPCA basis functions:#
#
mu <- function(time_obs, j) {#
	ans <- ((-1)^j)*3*sin(pi*j*time_obs) - 3/2#
	return(ans)#
}#
#
psi_1 <- function(time_obs, j) {#
	ans <- sqrt(2/p)*sin(2*pi*j*time_obs)#
	return(ans)#
}#
#
psi_2 <- function(time_obs, j) {#
	ans <- sqrt(2/p)*cos(2*pi*j*time_obs)#
	return(ans)#
}#
#
Psi_func <- function(time_obs, j, p) {#
#
  ans <- cbind(psi_1(time_obs, j), psi_2(time_obs, j))#
  return(ans)#
}#
#
#####################################################
##
#  SIMULATE  THE  DATA#
##
#####################################################
#
# Set up the data:#
#
mfpca_data <- generate_fpca_data(N, p, n, K, L, n_g, sigma_eps, mu, Psi_func)#
#
time_obs <- mfpca_data$"time_obs"#
Zeta <- mfpca_data$"Zeta"#
mu_g <- mfpca_data$"mu_g"#
Psi_g <- mfpca_data$"Psi_g"#
Y <- mfpca_data$"Y"
mfpca_res <- run_vmp_fpca(#
	time_obs, Y, K, L, tol = tol, maxit = n_vmp,#
	plot_elbo = TRUE, Psi_g = Psi_g#
)
tol
source("mfpca_vmp.R")
traceback()
source("mfpca_vmp.R")
traceback()
source("mfpca_vmp.R")
source("mfpca_vmp.R")
